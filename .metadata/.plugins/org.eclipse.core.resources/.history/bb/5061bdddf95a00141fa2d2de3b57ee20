import java.io.*;
import java.util.Scanner;

public class Main {

	private static HashTable table;

	public static void main(String[] args) {
		// ArrayList orderIn = new ArrayList();
		Scanner input = new Scanner(System.in);
		System.out.println("What file should I process?");
		String fileName = input.nextLine();
		try {
			processFile(fileName);
		} catch (Exception e) {
			System.out.println("ERROR PROCESSING FILE:" + e);
		}
		System.out.println("THIS WILL BE INTERFACE");
		promptUser(input);
		input.close();
		return;

	}

	public static void processFile(String fileName) throws IOException,
			FileNotFoundException {
		Scanner lineCounter = new Scanner(new FileReader(fileName));
		Scanner fileScanner = new Scanner(new FileReader(fileName));

		int keySize = fileScanner.nextInt(); // get key size
		int[] maxVals = new int[keySize];
		// get max values for key
		for (int i = 0; i < keySize; i++) {
			maxVals[i] = fileScanner.nextInt();
		}

		// find # of lines in file
		int numLines = 0;
		while (lineCounter.hasNextLine()) {
			lineCounter.nextLine();
			numLines++;
		}
		lineCounter.close();

		Key.initKey(keySize, maxVals);
		Key.printStats();
		System.out.println(numLines);
		// init hash table to 120% of the number of lines in the file (some will
		// be duplicate keys)
		table = new HashTable((int) (numLines * 1.2));
		int[] vals = new int[keySize];
		while (fileScanner.hasNextLine()) {
			for (int i = 0; i < keySize; i++) {
				int val = fileScanner.nextInt();
				if (val == -911) { // end of file
					fileScanner.close();
					return;
				}
				vals[i] = val;
			}
			table.addKey(new Key(vals));
		}
		fileScanner.close();
	}

	public static void promptUser(Scanner input) {
		Integer command;
		while (true) {
			System.out.println("What would you like to do? (enter corresponding number)");
			System.out.println("Enter a key (1)");
			System.out.println("Enter an index (2)");
			System.out.println("Exit (3)");
			System.out.print(">");
			
			try {
				command = Integer.decode(input.nextLine());
			} catch (NumberFormatException e) {
				System.out.println("You must enter a number\n");
				continue;
			}
			
			switch((int)command) {
			case 1:
				getKey(input);
			case 2:
				System.out.println("Enter an index");
				break;
			case 3:
				return;
			default:
				System.out.println("Unknown command");
			}
		}
	}
	
	public static Key getKey(Scanner input) {
		System.out.println("Enter key in form: val1 val2 ...");
		int[] vals = new int[Key.getKeySize()];
		for(int i = 0; i < Key.getKeySize(); i++) {
			if(input.hasNext()) {
				vals[i] = input.nextInt();
			} else {
				System.out.println("Not enough key values");
				return null;
			}
		}
		
		if (Key.checkVals(vals)) {
			return new Key(vals);
		} else {
			return null;
		}
	}
}