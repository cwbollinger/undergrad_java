package edu.ncsu.csc216.todolist.util;

import java.io.Serializable;
import java.util.Arrays;

// TODO: Auto-generated Javadoc
/**
 * The Class ArrayList.
 *
 * @param <E> the element type
 */
public class ArrayList<E> implements List, Serializable {
	
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 28592L;
	
	/** The default size of the array. */
	private static final int DEFAULT_SIZE = 10;
	
	/** The list. */
	private E[] list;
	
	/** The size of the list. */
	private int size = 0;
	
	/**
	 * Instantiates a new array list.
	 *
	 * @param capacity the capacity
	 */
	@SuppressWarnings("unchecked")
	public ArrayList(int capacity) {
		if(capacity <= 0)
			throw new IllegalArgumentException();
		list = (E[]) (new Object[capacity]);
		size = 0;
	}
	
	/**
	 * Instantiates a new array list. \n The size is set to the {code: }
	 * 
	 */
	public ArrayList() {
		this(DEFAULT_SIZE);
	}
	
	/* (non-Javadoc)
	 * @see edu.ncsu.csc216.todolist.util.List#size()
	 */
	@Override
	public int size() {
		return size;
	}

	/* (non-Javadoc)
	 * @see edu.ncsu.csc216.todolist.util.List#isEmpty()
	 */
	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	/* (non-Javadoc)
	 * @see edu.ncsu.csc216.todolist.util.List#contains(java.lang.Object)
	 */
	@Override
	public boolean contains(Object o) {
		if(o == null)
			return false;
		for(int i = 0; i < size; i++){
			if(o.equals(get(i)))
				return true;
		}
		return false;
	}

	/* (non-Javadoc)
	 * @see edu.ncsu.csc216.todolist.util.List#add(java.lang.Object)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public boolean add(Object o) {
		if(o == null){
			throw new NullPointerException();
		}
		if(this.contains(o))
			throw new IllegalArgumentException();
		ensureCapacity(size + 1);
		list[size] = (E) o;
		size++;
		return true;
	}

	/**
	 * Ensure capacity.
	 *
	 * @param i the i
	 */
	private void ensureCapacity(int i) {
		if (i > list.length) {
			int newCapacity = list.length * 2 + 1;
			if (i > newCapacity) {
				newCapacity = i;
				
			}
			list = Arrays.copyOf(list,  newCapacity);
		}
	}

	/* (non-Javadoc)
	 * @see edu.ncsu.csc216.todolist.util.List#get(int)
	 */
	@Override
	public E get(int index) {
		if (index < 0 || index >= size) {
			throw new IndexOutOfBoundsException();
		}
		return list[index];
	}

	/* (non-Javadoc)
	 * @see edu.ncsu.csc216.todolist.util.List#add(int, java.lang.Object)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void add(int index, Object element) {
		if (index < 0 || index > size) {
			throw new IndexOutOfBoundsException();
		}
		if(element == null){
			throw new NullPointerException();
		}
		if(this.contains(element))
			throw new IllegalArgumentException();
		
		ensureCapacity(size + 1);
		for (int i = size - 1; i >= index; i--) {
			list[i + 1] = list[i];
		}
		list[index] = (E) element;
		size++;
	}

	/* (non-Javadoc)
	 * @see edu.ncsu.csc216.todolist.util.List#remove(int)
	 */
	@Override
	public E remove(int index) {
		if (index < 0 || index >= size) {
			throw new IndexOutOfBoundsException();
		}
		E rtn = list[index];
		for (int i = index; i < size - 1; i++) {
			list[i] = list[i+1];
		}
		list[size - 1] = null;
		size--;
		return rtn;
	}

	/* (non-Javadoc)
	 * @see edu.ncsu.csc216.todolist.util.List#indexOf(java.lang.Object)
	 */
	@Override
	public int indexOf(Object o) {
		for(int i = 0; i < size; i++){
			if(list[i] == null)
				break;
			if(list[i].equals(o)){
				return i;
			}
				
		}
		return -1;
	}

}
