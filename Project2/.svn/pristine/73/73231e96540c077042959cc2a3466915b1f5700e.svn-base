package edu.ncsu.csc216.todolist.util;

import java.io.Serializable;

public class LinkedList<E> implements List, Serializable {
	
	private static final long serialVersionUID = 7459L;
	private int size;
	private Node front;
	
	public LinkedList(){
		front = null;
		size = 0;
	}
	
	@Override
	public int size() {
		return size;
	}

	@Override
	public boolean isEmpty() {
		if(front == null)
			return true;
		else
			return false;
	}

	@Override
	public boolean contains(Object obj) {
		Node current = front; //avoid losing list
		while (current.next != null) {
			current = current.next;
			if(current.data.equals(obj))
				return true;
		}
		return false;
	}

	@Override
	public boolean add(Object value) {
		if (front == null) {
			//adding to an empty list
			front = new Node(value, null);
		} else {
			//adding to the end of an existing list
			Node current = front; //avoid losing list
			while (current.next != null) {
				current = current.next;
			}
			current.next = new Node(value, null);
		}
		size++;
		return true;
	}

	@Override
	public Object get(int idx) {
		if(idx < 0 || idx > size){
			throw new IllegalArgumentException();
		}
		Node current = front;
		for (int i = 0; i < idx; i++) {
			current = current.next;
		}
		return current.data;
	}

	@Override
	public void add(int idx, Object obj) {
		if (idx < 0 || idx > size) {
			throw new IndexOutOfBoundsException();
		}
		if (idx == 0) {
			//add to front of list
			front = new Node(obj, front);
		} else {
			//inserting into an existing list
			Node current = front;
			//stop BEFORE index to add at
			for (int i = 0; i < idx - 1; i++) {
				current = current.next;
			}
			current.next = new Node(obj, current.next);
		}
		size++;
	}

	@Override
	public Object remove(int idx) {
		Object value = null;
		if (front == null) {
			throw new IndexOutOfBoundsException();
		}
		if (idx == 0) {
			value = front.data;
			front = front.next;
		} else {
			Node current = front;
			int i = 0;
			while (current.next != null && i < idx-1) {
				current = current.next;
				i++;
			}
			if (current.next == null) {
				throw new IndexOutOfBoundsException();
			}
			value = current.next.data;
			current.next = current.next.next;
		}
		size--;
		return value;
	}

	@Override
	public int indexOf(Object obj) {
		if (obj == null) {
			throw new IllegalArgumentException();
		}
		if (front == null) {
			return -1;
		} else {
			Node current = front;
			int i = 0;
			while (current.next != null && i < size-1) {
				if(current.data.equals(obj))
					return i;
				current = current.next;
				i++;
			}
		}
		
		return -1;
	}
	
	
	
	private class Node implements Serializable{
		private static final long serialVersionUID = 484909840L;
		protected Object data;
		Node next;
		public Node(Object obj, Node n){
			this.data = obj;
			this.next = n;
		}
	}
}
